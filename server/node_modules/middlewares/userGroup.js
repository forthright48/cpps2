/* Middleware to maintain User Hierarchy
 *
 * 0. admin
 * 1. coach
 */

module.exports = {
  isAdmin(req, res, next) {
    const sess = req.session || {};
    if (sess.roles && sess.roles.includes('admin')) return next();

    const regexApi = /^\/api\/v1/g;
    if (regexApi.exec(req.originalUrl)) {
      return res.status(401).json({
        status: 401,
        message: 'Unauthorized: You are not admin',
        route: req.originalUrl,
      });
    }

    req.flash('info', 'You must be "admin" to proceed');
    return res.status(401).redirect('/');
  },

  isCoach(req, res, next) {
    const sess = req.session || {};

    if (
      sess.roles &&
      (sess.roles.includes('coach'))
    ) return next();

    const regexApi = /^\/api\/v1/g;
    if (regexApi.exec(req.originalUrl)) {
      return res.status(401).json({
        status: 401,
        message: 'Unauthorized: You are not coach',
        route: req.originalUrl,
      });
    }

    req.flash('info', 'You must be at least "coach" to proceed');
    return res.status(401).redirect('/');
  },
};

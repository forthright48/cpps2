const rq = require('request-promise');
const _ = require('lodash');

let pidMap;

async function getPidMap() {
  if (pidMap) return pidMap;
  pidMap = {};
  const problemBank = await rq.get({
    url: `https://uhunt.onlinejudge.org/api/p`,
    json: true,
  });
  _.forEach(problemBank, function(p) {
    pidMap[p[0]] = p[1];
  });
  return pidMap;
}

async function getUserInfo (username) {
  try {
    const userID = await rq.get({
      url: `http://uhunt.onlinejudge.org/api/uname2uid/${username}`,
    });
    const pidMap = await getPidMap();
    const solvedBits = await rq.get({
      url: `http://uhunt.onlinejudge.org/api/solved-bits/${userID}`,
      json: true,
    });
    /** Now map the bits with problem ID */
    const solved = [];
    _.forEach(solvedBits[0].solved, function(mask, index) {
      for (let i = 0; i < 32; i++) {
        if (mask & (1 << i)) { /// This bit is on
          const pid = index * 32 + i;
          const problemID = pidMap[pid];
          if (!problemID) throw Error(`pid not found in pidMap`);
          solved.push(problemID);
        }
      }
    });

    const solvedOrdered = _.orderBy(solved).map((x) => x.toString());
    return {
      platform: 'uva',
      username,
      userID,
      solveCount: solvedOrdered.length,
      solveList: solvedOrdered,
    };
  } catch (err) {
    throw err;
  }
}

async function getProblemInfo (problemID) {
  try {
    const res = await rq.get({
      url: `http://uhunt.onlinejudge.org/api/p/num/${problemID}`,
      json: true,
    });
    const info = {
      platform: 'uva',
      problemID,
      title: res.title,
      link: `http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=18&page=show_problem&problem=${res.pid}`,
    };
    return info;
  } catch (err) {
    throw err;
  }
};

async function getUserSubmissions(username, days){
  const verdictMap = {
    10 : "Submission error",
    15 : "Can't be judged",
    20 : "In queue",
    30 : "Compile error",
    35 : "Restricted function",
    40 : "Runtime error",
    45 : "Output limit",
    50 : "Time limit",
    60 : "Memory limit",
    70 : "Wrong answer",
    80 : "PresentationE",
    90 : "Accepted",
  };
  try{
    await getPidMap();
    const userID = await rq.get({
      url: `http://uhunt.onlinejudge.org/api/uname2uid/${username}`,
    });
    const res = await rq.get({
      url: `https://uhunt.onlinejudge.org/api/subs-user/${userID}`,
      json: true,
    });

    
    let data = {
    	subs: [],
    }

    for(let submission of res.subs){
      let info = {
        submissionTime: submission[4],
        submissionID: submission[0],
        problemID: pidMap[submission[1]],
        verdict: verdictMap[submission[2]],
        runtime: submission[3],
        rank: submission[6],

      };
      data.subs.push(info);
      
    }
    data.subs.sort((a, b) => {
      if (a.submissionTime < b.submissionTime){
        return 1;
      }
      else {
        return -1;
      }
    });
    if (days){
      for(let i=0; i<data.subs.length; i++){
        let dif = Date.now()/1000;
        //console.log(dif);
       // dif -= (new Date(data.subs[i].submissionTime)).getTime();
        dif -= data.subs[i].submissionTime;
        //console.log(data.subs[i].submissionTime);
        
        if (dif>days*86400){
          if (i==0){
            data.subs = [];
          }
          else {
            data.subs = data.subs.slice(0, i);
          }
          
          break;
        }
      }
    }

    return data;


    // console.log(data);
    // console.log("no. of submissions ", data.subs.length);
    
  }catch(err){
  	console.log("error = ", err);
    throw err;
  }
}



module.exports = {
  getProblemInfo,
  getUserInfo,
  getUserSubmissions,
};
